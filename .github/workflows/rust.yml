name: tauri-build

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch: {}

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: macos-latest
            args: '--target aarch64-apple-darwin'
          - os: macos-latest
            args: '--target x86_64-apple-darwin'
          - os: windows-latest
            args: ''
          - os: ubuntu-latest
            args: ''
          - os: [self-hosted, ARM64, Linux]
            args: '--target aarch64-unknown-linux-gnu'
    runs-on: ${{ matrix.os }}

    steps:
      - name: checkout
        uses: actions/checkout@v4

      # SOLO per runner non self-hosted
      - name: setup node (GitHub hosted)
        if: matrix.os != '[self-hosted, ARM64, Linux]'
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: npm

      # SOLO per runner non self-hosted
      - name: setup rust (GitHub hosted)
        if: matrix.os != '[self-hosted, ARM64, Linux]'
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.os == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      # SETUP SPECIFICO per self-hosted ARM64
      - name: setup ARM64 environment (self-hosted)
        if: contains(matrix.os, 'self-hosted')
        run: |
          echo "🍓 Setting up ARM64 environment for self-hosted runner"
          
          # Verifica architettura
          echo "Current architecture: $(uname -m)"
          
          # Rimuovi Node.js x86 se presente
          sudo apt remove nodejs npm -y 2>/dev/null || true
          sudo apt autoremove -y
          
          # Pulisci cache NPM precedenti
          rm -rf ~/.npm ~/.cache/npm
          
          # Installa Node.js ARM64 nativo
          curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
          sudo apt-get install -y nodejs
          
          # Verifica installazione
          echo "Node.js version: $(node --version)"
          echo "Node.js architecture: $(file $(which node) | grep -o 'ARM aarch64\|x86-64')"
          echo "NPM version: $(npm --version)"
          
          # Setup Rust se non presente o sbagliato
          if ! command -v cargo &> /dev/null || [[ "$(file ~/.cargo/bin/cargo)" == "x86-64" ]]; then
            echo "Installing/fixing Rust for ARM64..."
            rustup self uninstall -y 2>/dev/null || true
            curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
            source ~/.cargo/env
          fi
          
          echo "Rust version: $(rustc --version)"
          echo "Cargo architecture: $(file ~/.cargo/bin/cargo | grep -o 'ARM aarch64\|x86-64')"
          
          # Aggiungi ARM64 target
          rustup target add aarch64-unknown-linux-gnu
          
          # Configurazione ottimizzata per ARM64
          mkdir -p ~/.cargo
          cat > ~/.cargo/config.toml << 'EOF'
          [build]
          jobs = 3
          
          [target.aarch64-unknown-linux-gnu]
          rustflags = ["-C", "target-cpu=native"]
          
          [profile.dev]
          opt-level = 1
          debug = 1
          
          [profile.release]
          opt-level = 2
          lto = "thin"
          codegen-units = 1
          EOF

      - name: add mac targets
        if: matrix.os == 'macos-latest'
        run: |
          rustup target add aarch64-apple-darwin
          rustup target add x86_64-apple-darwin

      - name: cache cargo (non self-hosted)
        if: matrix.os != '[self-hosted, ARM64, Linux]'
        uses: Swatinem/rust-cache@v2

      # Cache manuale per self-hosted (più affidabile)
      - name: cache cargo (self-hosted)
        if: contains(matrix.os, 'self-hosted')
        run: |
          # Crea directory cache se non esiste
          mkdir -p ~/.cargo/registry/cache
          mkdir -p ~/.cargo/registry/src
          mkdir -p ~/.cargo/git/db
          echo "Cargo cache directory prepared"

      - name: install frontend deps (non self-hosted)
        if: matrix.os != '[self-hosted, ARM64, Linux]'
        run: npm ci

      - name: install frontend deps (self-hosted)
        if: contains(matrix.os, 'self-hosted')
        run: |
          # Assicurati di usare il Node.js ARM64 appena installato
          export PATH="/usr/bin:$PATH"
          
          # Pulisci node_modules precedenti (potrebbero contenere binari x86)
          rm -rf node_modules package-lock.json
          
          # Installa con Node.js ARM64
          npm install
          
          echo "Frontend dependencies installed with ARM64 Node.js"

      - name: install nsis
        if: matrix.os == 'windows-latest'
        run: choco install nsis -y

      - name: install linux deps (Ubuntu hosted)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libayatana-appindicator3-dev librsvg2-dev patchelf libsoup-3.0-dev libwebkit2gtk-4.1-dev libjavascriptcoregtk-4.1-dev

      - name: install linux deps (self-hosted ARM64)
        if: contains(matrix.os, 'self-hosted')
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            libgtk-3-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev \
            patchelf \
            libsoup-3.0-dev \
            libwebkit2gtk-4.1-dev \
            libjavascriptcoregtk-4.1-dev \
            libssl-dev \
            pkg-config

      - name: build frontend
        run: |
          if [[ "${{ matrix.os }}" == "self-hosted" ]]; then
            export PATH="/usr/bin:$PATH"
            export NODE_OPTIONS="--max-old-space-size=3072"
          fi
          npm run build

      - name: build tauri app
        run: |
          if [[ "${{ matrix.os }}" == "self-hosted" ]]; then
            source ~/.cargo/env
            export PATH="$HOME/.cargo/bin:/usr/bin:$PATH"
            export NODE_OPTIONS="--max-old-space-size=3072"
            
            # Debug info
            echo "Using Node.js: $(which node)"
            echo "Using Cargo: $(which cargo)"
            echo "Target: ${{ matrix.args }}"
            
            # Build con Tauri CLI locale
            ~/.cargo/bin/tauri build ${{ matrix.args }} --verbose
          else
            npm run tauri build -- ${{ matrix.args }}
          fi
        env:
          PKG_CONFIG_ALLOW_CROSS: ${{ contains(matrix.args, 'aarch64-unknown-linux-gnu') && '1' || '' }}

      - name: upload bundle Windows
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: AirShare-Setup.exe
          path: src-tauri/target/release/bundle/nsis/*.exe

      - name: upload bundle macOS aarch64
        if: matrix.os == 'macos-latest' && matrix.args == '--target aarch64-apple-darwin'
        uses: actions/upload-artifact@v4
        with:
          name: AirShare-ARM64.dmg
          path: src-tauri/target/aarch64-apple-darwin/release/bundle/dmg/*.dmg

      - name: upload bundle macOS x86_64
        if: matrix.os == 'macos-latest' && matrix.args == '--target x86_64-apple-darwin'
        uses: actions/upload-artifact@v4
        with:
          name: AirShare-x86_64.dmg
          path: src-tauri/target/x86_64-apple-darwin/release/bundle/dmg/AirShare_0.3.1_x64.dmg

      - name: upload bundle Linux
        if: matrix.os == 'ubuntu-latest' && matrix.args == ''
        uses: actions/upload-artifact@v4
        with:
          name: AirShare-linux
          path: src-tauri/target/release/bundle/deb/*.deb

      - name: upload bundle Linux AppImage
        if: matrix.os == 'ubuntu-latest' && matrix.args == ''
        uses: actions/upload-artifact@v4
        with:
          name: AirShare-linux-AppImage
          path: src-tauri/target/release/bundle/appimage/*.AppImage

      - name: upload bundle Linux ARM64
        if: contains(matrix.os, 'self-hosted') || (matrix.os == 'ubuntu-latest' && matrix.args == '--target aarch64-unknown-linux-gnu')
        uses: actions/upload-artifact@v4
        with:
          name: AirShare-linux-arm64
          path: |
            src-tauri/target/aarch64-unknown-linux-gnu/release/bundle/deb/*.deb
            src-tauri/target/release/bundle/deb/*.deb

      - name: upload bundle Linux ARM64 AppImage
        if: contains(matrix.os, 'self-hosted') || (matrix.os == 'ubuntu-latest' && matrix.args == '--target aarch64-unknown-linux-gnu')
        uses: actions/upload-artifact@v4
        with:
          name: AirShare-linux-arm64-AppImage
          path: |
            src-tauri/target/aarch64-unknown-linux-gnu/release/bundle/appimage/*.AppImage
            src-tauri/target/release/bundle/appimage/*.AppImage